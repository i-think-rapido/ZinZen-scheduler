#[test]
fn time_slot_iterator_range_returns_all_tuesdays() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::TUESDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 6).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 7).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 13).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 14).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 20).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 21).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 27).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 28).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_wednesdays() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::WEDNESDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 7).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 8).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 14).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 15).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 21).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 22).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 28).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 29).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_thursdays() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::THURSDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 8).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 9).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 15).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 16).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 22).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 23).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 29).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_fridays() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::FRIDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 9).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 10).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 16).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 17).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 23).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 24).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 10, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_saturdays() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::SATURDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 4).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 10).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 11).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 17).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 18).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 24).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 25).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_sundays() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::SUNDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 4).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 5).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 11).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 12).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 18).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 19).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 25).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 26).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_weekdays() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 14).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::WEEKDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 5).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 6).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 6).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 7).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 7).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 8).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 8).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 9).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 9).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 10).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 12).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 13).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 13).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 14).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_weekends() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 9, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::WEEKENDS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 4).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 4).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 5).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 10).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 11).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 11).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 12).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 17).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 18).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 18).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 19).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 24).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 25).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 25).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 26).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_weeks() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2022, 10, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::Weekly,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2022, 9, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 5).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 5).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 12).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 12).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 19).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 19).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 9, 26).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2022, 9, 26).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2022, 10, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_weeks_starting_on_a_sunday() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2023, 1, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2023, 2, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::Weekly,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2023, 1, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 1, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 1, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 1, 9).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 1, 9).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 1, 16).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 1, 16).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 1, 23).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 1, 23).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 1, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 1, 30).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 2, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_weeks_ending_on_a_sunday() {
    let r = TimeSlotsIterator {
        start: NaiveDate::from_ymd_opt(2023, 4, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        end: NaiveDate::from_ymd_opt(2023, 5, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
        repetition: Repetition::Weekly,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd_opt(2023, 4, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 4, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 4, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 4, 10).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 4, 10).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 4, 17).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 4, 17).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 4, 24).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
            (
                NaiveDate::from_ymd_opt(2023, 4, 24).unwrap().and_hms_opt(0, 0, 0).unwrap(),
                NaiveDate::from_ymd_opt(2023, 5, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),
            ),
        ]
    )
}

